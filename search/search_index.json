{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tri par s\u00e9lection et par insertion Bienvenue, ce site est d\u00e9di\u00e9 au cours de premi\u00e8re NSI sur le tri par s\u00e9lection et par insertion . COURS : Cours tri par s\u00e9lection Cours tri par insertion (\u00e0 venir) Demerville Erwan Me contacter : demerville.erwan@gmail.com","title":"Tri par s\u00e9lection et par insertion"},{"location":"#tri-par-selection-et-par-insertion","text":"Bienvenue, ce site est d\u00e9di\u00e9 au cours de premi\u00e8re NSI sur le tri par s\u00e9lection et par insertion . COURS : Cours tri par s\u00e9lection Cours tri par insertion (\u00e0 venir) Demerville Erwan Me contacter : demerville.erwan@gmail.com","title":"Tri par s\u00e9lection et par insertion"},{"location":"activite_preliminaire/","text":"Activit\u00e9 pr\u00e9liminaire sur les tris L'objectif de cette activit\u00e9 est de d\u00e9terminer une strat\u00e9gie claire et pr\u00e9cise permettant, \u00e0 partir d'une suite de cartes arbitrairement choisies, d\u2019obtenir une suite de cartes tri\u00e9es dans l'ordre croissant suivant leur valeur faciale \u00e0 la fin du processus. On ne se souciera ici que des valeurs des cartes et non de leurs couleurs . Voici l' ordre des valeurs des cartes, de la moins forte \u00e0 la plus forte , que l'on utilisera : Note : Si la carte Joker existe dans votre jeu, on consid\u00e8rera qu'elle est plus forte que toutes les autres cartes. Partie 1 : Exp\u00e9rimentation La zone de jeu est constitu\u00e9e : d'une suite de 8 cartes auxquelles sont associ\u00e9es un indice de 0 \u00e0 7 , d'une zone temporaire dans laquelle on peut stocker l' indice ou la valeur d'une carte. Zone de jeu \u00c0 faire Par groupes de 2 \u00e0 3 personnes, vous devez : Disposer une suite de 8 cartes arbitrairement choisies sur votre table. \u00c9tablir, \u00e0 l'\u00e9crit, une suite d'instructions \u00ab en fran\u00e7ais \u00bb permettant de trier ces cartes dans l'ordre croissant. Votre strat\u00e9gie doit pouvoir \u00eatre reproduite sur n'importe quelle suite de cartes . Vous l'\u00e9crirez sur un bloc-note https://collab.infoforall.fr/ . Tester votre strat\u00e9gie sur diff\u00e9rentes suites de cartes et vous assurer qu'elle fonctionne toujours. Important Les seules op\u00e9rations \u00e9l\u00e9mentaires autoris\u00e9es sont les suivantes : comparer les valeurs de deux cartes , permuter (\u00e9changer) deux cartes , copier l'indice ou la valeur d'une carte de la suite dans la zone temporaire (et inversement), vous pouvez utiliser des conditions ( SI ... , SINON ) et des boucles ( TANT QUE , POUR ... ALLANT DE ... A ... ). Voici \u00e9galement quelques r\u00e8gles \u00e0 respecter : vous ne pouvez parcourir les cartes que de la gauche vers la droite (on ne revient pas en arri\u00e8re), si une t\u00e2che est r\u00e9p\u00e9titive, vous pouvez la nommer (cr\u00e9er un autre bloc d'instructions qui sera utilis\u00e9 dans le bloc principal), votre strat\u00e9gie doit \u00eatre suffisamment claire, mais vous n'avez pas obligation d'\u00e9crire un algorithme formel. Partie 2 : Bilan des strat\u00e9gies Afin de s'assurer de la clart\u00e9 de chaque strat\u00e9gie, chaque groupe tentera \u00e0 pr\u00e9sent de trier une suite de 8 cartes arbitrairement choisies en utilisant les strat\u00e9gies propos\u00e9es par les autres groupes . \u00c0 faire Par groupes de 2 \u00e0 3 personnes, vous devez : D\u00e9rouler les instructions propos\u00e9es par les autres groupes sur des suites de 8 cartes choisies arbitrairement . Indiquer quelles sont les strat\u00e9gies qui fonctionnent, et celles qui ne fonctionnent pas. Partie 3 : Tri par s\u00e9lection Principe du tri par s\u00e9lection Le tri par s\u00e9lection se d\u00e9roule comme suit : Chercher l' indice de la plus faible carte de la suite (\u00e0 partir de l'indice 0 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en premier . La premi\u00e8re carte est maintenant la plus faible . Chercher l' indice de la plus faible carte de la suite en partant du 2\u00e8me \u00e9l\u00e9ment (indice 1 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en deuxi\u00e8me . Les deux premi\u00e8res cartes sont les plus faibles et sont maintenant tri\u00e9es . Poursuivre ainsi jusqu\u2019\u00e0 l\u2019 avant derni\u00e8re carte de la liste. Note : Si la valeur la plus faible des cartes de la suite est associ\u00e9e \u00e0 plusieurs cartes, on consid\u00e8rera que la plus faible carte est la premi\u00e8re (en parcourant de gauche \u00e0 droite ) ayant cette valeur. \u00c0 faire 1 D\u00e9rouler la m\u00e9thode de tri par s\u00e9lection d\u00e9crite ci-dessus, avec une approche humaine d'abord, sur une suites de 8 cartes arbitrairement choisies afin de v\u00e9rifier son bon fonctionnement. On a ici exp\u00e9riment\u00e9 la m\u00e9thode de tri par s\u00e9lection avec une approche humaine , c'est-\u00e0-dire que vous avez utilis\u00e9 votre cerveau pour d\u00e9terminer facilement, \u00e0 chaque \u00e9tape, la carte la plus faible de la suite. Toutefois, en raisonnant avec une d\u00e9marche plus proche de la machine , la recherche de la carte la plus faible doit se d\u00e9composer en op\u00e9rations \u00e9l\u00e9mentaires, incluant notamment des affectations , des comparaisons et des conditions . Recherche de la plus faible carte Pour rechercher la plus faible carte de la suite de cartes \u00e0 partir d'un indice \\(i\\) donn\u00e9 : Stocker l' indice \\(i\\) dans la zone temporaire . En parcourant la suite de cartes de gauche \u00e0 droite , \u00e0 partir de l'indice \\(i + 1\\) et jusqu'au bout de la suite : Comparer les valeurs de chaque carte de la suite avec la valeur de la carte dont l' indice est stock\u00e9 dans la zone temporaire . SI une carte de la suite a une valeur strictement inf\u00e9rieure \u00e0 la valeur de la carte dont l' indice est stock\u00e9 dans la zone temporaire , remplacer l'ancien indice stock\u00e9 dans la zone temporaire par l' indice de cette carte . Renvoyer enfin l' indice contenu dans la zone temporaire . \u00c0 faire 2 Vous devez \u00e0 pr\u00e9sent : D\u00e9rouler de nouveau la m\u00e9thode de tri par s\u00e9lection , en d\u00e9composant la recherche de la carte la plus faible comme d\u00e9crit ci-dessus, sur plusieurs suites de 8 cartes arbitrairement choisies. Calculer, pour chaque suite de cartes, le nombre total de comparaisons de deux cartes ayant \u00e9t\u00e9 effectu\u00e9es. Que pouvez-vous en dire sur le co\u00fbt de ce tri ? Est-ce un tri efficace ?","title":"Activit\u00e9 pr\u00e9liminaire sur les tris"},{"location":"activite_preliminaire/#activite-preliminaire-sur-les-tris","text":"L'objectif de cette activit\u00e9 est de d\u00e9terminer une strat\u00e9gie claire et pr\u00e9cise permettant, \u00e0 partir d'une suite de cartes arbitrairement choisies, d\u2019obtenir une suite de cartes tri\u00e9es dans l'ordre croissant suivant leur valeur faciale \u00e0 la fin du processus. On ne se souciera ici que des valeurs des cartes et non de leurs couleurs . Voici l' ordre des valeurs des cartes, de la moins forte \u00e0 la plus forte , que l'on utilisera : Note : Si la carte Joker existe dans votre jeu, on consid\u00e8rera qu'elle est plus forte que toutes les autres cartes.","title":"Activit\u00e9 pr\u00e9liminaire sur les tris"},{"location":"activite_preliminaire/#partie-1-experimentation","text":"La zone de jeu est constitu\u00e9e : d'une suite de 8 cartes auxquelles sont associ\u00e9es un indice de 0 \u00e0 7 , d'une zone temporaire dans laquelle on peut stocker l' indice ou la valeur d'une carte. Zone de jeu \u00c0 faire Par groupes de 2 \u00e0 3 personnes, vous devez : Disposer une suite de 8 cartes arbitrairement choisies sur votre table. \u00c9tablir, \u00e0 l'\u00e9crit, une suite d'instructions \u00ab en fran\u00e7ais \u00bb permettant de trier ces cartes dans l'ordre croissant. Votre strat\u00e9gie doit pouvoir \u00eatre reproduite sur n'importe quelle suite de cartes . Vous l'\u00e9crirez sur un bloc-note https://collab.infoforall.fr/ . Tester votre strat\u00e9gie sur diff\u00e9rentes suites de cartes et vous assurer qu'elle fonctionne toujours. Important Les seules op\u00e9rations \u00e9l\u00e9mentaires autoris\u00e9es sont les suivantes : comparer les valeurs de deux cartes , permuter (\u00e9changer) deux cartes , copier l'indice ou la valeur d'une carte de la suite dans la zone temporaire (et inversement), vous pouvez utiliser des conditions ( SI ... , SINON ) et des boucles ( TANT QUE , POUR ... ALLANT DE ... A ... ). Voici \u00e9galement quelques r\u00e8gles \u00e0 respecter : vous ne pouvez parcourir les cartes que de la gauche vers la droite (on ne revient pas en arri\u00e8re), si une t\u00e2che est r\u00e9p\u00e9titive, vous pouvez la nommer (cr\u00e9er un autre bloc d'instructions qui sera utilis\u00e9 dans le bloc principal), votre strat\u00e9gie doit \u00eatre suffisamment claire, mais vous n'avez pas obligation d'\u00e9crire un algorithme formel.","title":"Partie 1 : Exp\u00e9rimentation"},{"location":"activite_preliminaire/#partie-2-bilan-des-strategies","text":"Afin de s'assurer de la clart\u00e9 de chaque strat\u00e9gie, chaque groupe tentera \u00e0 pr\u00e9sent de trier une suite de 8 cartes arbitrairement choisies en utilisant les strat\u00e9gies propos\u00e9es par les autres groupes . \u00c0 faire Par groupes de 2 \u00e0 3 personnes, vous devez : D\u00e9rouler les instructions propos\u00e9es par les autres groupes sur des suites de 8 cartes choisies arbitrairement . Indiquer quelles sont les strat\u00e9gies qui fonctionnent, et celles qui ne fonctionnent pas.","title":"Partie 2 : Bilan des strat\u00e9gies"},{"location":"activite_preliminaire/#partie-3-tri-par-selection","text":"Principe du tri par s\u00e9lection Le tri par s\u00e9lection se d\u00e9roule comme suit : Chercher l' indice de la plus faible carte de la suite (\u00e0 partir de l'indice 0 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en premier . La premi\u00e8re carte est maintenant la plus faible . Chercher l' indice de la plus faible carte de la suite en partant du 2\u00e8me \u00e9l\u00e9ment (indice 1 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en deuxi\u00e8me . Les deux premi\u00e8res cartes sont les plus faibles et sont maintenant tri\u00e9es . Poursuivre ainsi jusqu\u2019\u00e0 l\u2019 avant derni\u00e8re carte de la liste. Note : Si la valeur la plus faible des cartes de la suite est associ\u00e9e \u00e0 plusieurs cartes, on consid\u00e8rera que la plus faible carte est la premi\u00e8re (en parcourant de gauche \u00e0 droite ) ayant cette valeur. \u00c0 faire 1 D\u00e9rouler la m\u00e9thode de tri par s\u00e9lection d\u00e9crite ci-dessus, avec une approche humaine d'abord, sur une suites de 8 cartes arbitrairement choisies afin de v\u00e9rifier son bon fonctionnement. On a ici exp\u00e9riment\u00e9 la m\u00e9thode de tri par s\u00e9lection avec une approche humaine , c'est-\u00e0-dire que vous avez utilis\u00e9 votre cerveau pour d\u00e9terminer facilement, \u00e0 chaque \u00e9tape, la carte la plus faible de la suite. Toutefois, en raisonnant avec une d\u00e9marche plus proche de la machine , la recherche de la carte la plus faible doit se d\u00e9composer en op\u00e9rations \u00e9l\u00e9mentaires, incluant notamment des affectations , des comparaisons et des conditions . Recherche de la plus faible carte Pour rechercher la plus faible carte de la suite de cartes \u00e0 partir d'un indice \\(i\\) donn\u00e9 : Stocker l' indice \\(i\\) dans la zone temporaire . En parcourant la suite de cartes de gauche \u00e0 droite , \u00e0 partir de l'indice \\(i + 1\\) et jusqu'au bout de la suite : Comparer les valeurs de chaque carte de la suite avec la valeur de la carte dont l' indice est stock\u00e9 dans la zone temporaire . SI une carte de la suite a une valeur strictement inf\u00e9rieure \u00e0 la valeur de la carte dont l' indice est stock\u00e9 dans la zone temporaire , remplacer l'ancien indice stock\u00e9 dans la zone temporaire par l' indice de cette carte . Renvoyer enfin l' indice contenu dans la zone temporaire . \u00c0 faire 2 Vous devez \u00e0 pr\u00e9sent : D\u00e9rouler de nouveau la m\u00e9thode de tri par s\u00e9lection , en d\u00e9composant la recherche de la carte la plus faible comme d\u00e9crit ci-dessus, sur plusieurs suites de 8 cartes arbitrairement choisies. Calculer, pour chaque suite de cartes, le nombre total de comparaisons de deux cartes ayant \u00e9t\u00e9 effectu\u00e9es. Que pouvez-vous en dire sur le co\u00fbt de ce tri ? Est-ce un tri efficace ?","title":"Partie 3 : Tri par s\u00e9lection"},{"location":"exercices_tri_selection/","text":"Exercices sur le tri par s\u00e9lection ...","title":"Exercices sur le tri par s\u00e9lection"},{"location":"exercices_tri_selection/#exercices-sur-le-tri-par-selection","text":"...","title":"Exercices sur le tri par s\u00e9lection"},{"location":"tri_selection/","text":"Le tri par s\u00e9lection Le tri par s\u00e9lection (du minimum ou du maximum ) est un algorithme de tri par comparaisons . Il s'agit d'un algorithme simple mais qui est, comme on le verra, inefficace . Pr\u00e9sentation du tri Avec un jeu de cartes Pour comprendre le fonctionnement de ce tri, voici une petite activit\u00e9 \u00e0 r\u00e9aliser avec un jeu de cartes traditionnel. On souhaite trier une suite de 7 cartes arbitrairement choisies. Par exemple : On ne se souciera ici que des valeurs des cartes et non de leurs couleurs . Voici l' ordre des valeurs des cartes, de la moins forte \u00e0 la plus forte , que l'on utilisera : Note : Si la carte Joker existe dans votre jeu, on consid\u00e8rera qu'elle est plus forte que toutes les autres cartes. Principe du tri par s\u00e9lection Le principe du tri par s\u00e9lection du minimum est le suivant : Chercher l' indice de la plus faible carte de la suite (\u00e0 partir de l'indice 0 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en premier . La premi\u00e8re carte est maintenant la plus faible . Chercher l' indice de la plus faible carte de la suite en partant du 2\u00e8me \u00e9l\u00e9ment (indice 1 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en deuxi\u00e8me . Les deux premi\u00e8res cartes sont les plus faibles et sont maintenant tri\u00e9es . Poursuivre ainsi jusqu\u2019\u00e0 l\u2019 avant derni\u00e8re carte de la suite. Exemple de d\u00e9roulement du tri par s\u00e9lection Simulation avec des barres Voici une simulation du tri par s\u00e9lection en utilisant des barres de diff\u00e9rentes tailles comme \u00e9l\u00e9ments. Le but est de trier les barres de la plus petite \u00e0 la plus grande . Simulation du tri par s\u00e9lection du minimum Ex\u00e9cuter R\u00e9initialiser Acc\u00e9l\u00e9rer Ralentir L'algorithme L'algorithme du tri par s\u00e9lection peut \u00eatre impl\u00e9ment\u00e9 en place ou non. Tri en place Un tri est dit en place s'il modifie directement la structure qu\u2019il est en train de trier, plut\u00f4t que de cr\u00e9er et de renvoyer une nouvelle structure. Ici, on ne renverra pas de nouveau tableau, on modifiera directement le tableau donn\u00e9 en entr\u00e9e. Le tri s'effectuera par s\u00e9lection du minimum . Pour simplifier les choses, on commence par s\u00e9parer l'algorithme de tri en 3 sous-algorithmes : l'algorithme principal tri_selection(tableau) permettant de trier un tableau d'\u00e9l\u00e9ments avec le tri par s\u00e9lection , l'algorithme minimum(tableau, debut) permettant la recherche de l'indice de l' \u00e9l\u00e9ment minimal du tableau \u00e0 partir de l'indice debut donn\u00e9, l'algorithme echanger(tableau, i, j) permettant d'\u00e9changer deux \u00e9l\u00e9ments d'indices i et j donn\u00e9s. Algorithme du tri par s\u00e9lection ALGORITHME : tri_selection ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments pouvant \u00eatre compar\u00e9s SORTIE : aucune (tri en place ) D\u00c9BUT \u2003\u2003n \u2190 longueur(tableau) \u2003\u2003 POUR debut ALLANT DE 0 \u00c0 n - 2 \u2003\u2003\u2003\u2003indice_min \u2190 minimum(tableau, debut) \u2003\u2003\u2003\u2003 SI indice_min \u2260 debut, ALORS \u2003\u2003\u2003\u2003\u2003\u2003echanger(tableau, debut, indice_min) \u2003\u2003 FIN POUR \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Algorithme de recherche du minimum ALGORITHME : minimum ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments debut : l' indice \u00e0 partir duquel effectuer la recherche SORTIE : l' indice de l'\u00e9l\u00e9ment minimal dans l'intervalle [debut, longueur(tableau) - 1] du tableau D\u00c9BUT \u2003\u2003indice_min \u2190 debut \u2003\u2003 POUR i ALLANT DE debut + 1 \u00c0 longueur(tableau) - 1 \u2003\u2003\u2003 SI tableau[i] < tableau[indice_min], ALORS \u2003\u2003\u2003\u2003indice_min \u2190 i \u2003\u2003 FIN POUR \u2003\u2003Renvoyer indice_min FIN ALGORITHME Algorithme d'\u00e9change d'\u00e9l\u00e9ments ALGORITHME : echanger ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments i : l' indice d'un \u00e9l\u00e9ment du tableau j : l' indice d'un autre \u00e9l\u00e9ment du tableau SORTIE : aucune (tri en place) D\u00c9BUT \u2003\u2003temp \u2190 tableau[i] \u2003\u2003tableau[i] \u2190 tableau[j] \u2003\u2003tableau[j] \u2190 temp \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Voici enfin une version en un seul algorithme : Algorithme du tri par s\u00e9lection ALGORITHME : tri_selection ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments pouvant \u00eatre compar\u00e9s . SORTIE : aucune (tri en place ) D\u00c9BUT \u2003\u2003n \u2190 longueur(tableau) \u2003\u2003 POUR debut ALLANT DE 0 \u00c0 n - 2 \u2003\u2003\u2003\u2003indice_min \u2190 debut \u2003\u2003\u2003\u2003 POUR i ALLANT DE debut + 1 \u00c0 n - 1 \u2003\u2003\u2003\u2003\u2003\u2003 SI tableau[i] < tableau[indice_min], ALORS \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003indice_min \u2190 i \u2003\u2003\u2003\u2003 FIN POUR \u2003\u2003\u2003\u2003 SI indice_min \u2260 debut, ALORS \u2003\u2003\u2003\u2003\u2003\u2003temp \u2190 tableau[debut] \u2003\u2003\u2003\u2003\u2003\u2003tableau[debut] \u2190 tableau[indice_min] \u2003\u2003\u2003\u2003\u2003\u2003tableau[indice_min] \u2190 temp \u2003\u2003 FIN POUR \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Notes La premi\u00e8re boucle POUR s'arr\u00eate \u00e0 n - 2 car si tous les \u00e9l\u00e9ments de l'intervalle [0, longueur(tableau) - 2] sont tri\u00e9s , l'\u00e9l\u00e9ment d' indice longueur(tableau) - 1 est obligatoirement d\u00e9j\u00e0 \u00e0 la bonne position . La condition SI indice_min \u2260 i, ALORS permet d'\u00e9viter d'effectuer une permutation si l'\u00e9l\u00e9ment d'indice i correspond \u00e0 l'\u00e9l\u00e9ment minimal . Stabilit\u00e9 du tri Un tri est dit stable s'il pr\u00e9serve l\u2019 ordonnancement initial des \u00e9l\u00e9ments que l'ordre consid\u00e8re comme \u00e9gaux. Le tri par s\u00e9lection est, dans le cas de notre algorithme, instable car en cas de valeurs identiques dans le tableau initial, leur ordre relatif peut \u00eatre modifi\u00e9. Exemple : Avec le tableau [2, 4a, 4b, 3, 7, 5] , l'ordre des \u00e9l\u00e9ments de valeur 4 n'est pas conserv\u00e9. S\u00e9lection du maximum Si l'on souhait \u00e9crire cet algorithme en s\u00e9lectionnant le maximum plut\u00f4t que le minimum, le principe serait le m\u00eame, mais le parcours s'effectuerait du dernier \u00e9l\u00e9ment au premier \u00e9l\u00e9ment du tableau. Le tableau serait dans ce cas d'abord compos\u00e9 de la partie non tri\u00e9e , puis de la partie tri\u00e9e . \u00c0 vous de jouer Question 1 : D\u00e9roulez le tri par s\u00e9lection du minimum sur le tableau [7, 1, 5, 3, 8, 5] en vous aidant du tableau suivant : Question 2 : Faites de m\u00eame sur le tableau [5, 3, 1, 4, 6, 2] . Question 3 : M\u00eame chose cette fois avec le tableau ['b', 'e', 'c', 'w', 'p', 'q'] . On utilisera l'ordre lexicographique . Impl\u00e9mentation du tri par s\u00e9lection On va maintenant impl\u00e9menter l'algorithme du tri par s\u00e9lection en Python . Les tableaux seront repr\u00e9sent\u00e9s par des listes Python (objets de type list ). Question pr\u00e9liminaire Les listes Python sont-elles des structures de donn\u00e9es mutables ou non ? Citer 2 structures mutables et deux structures non-mutables en Python. Note : Pour simplifier, on parlera de tableaux tri\u00e9s pour parler de tableaux tri\u00e9s dans l'ordre croissant . \u00c0 t\u00e9l\u00e9charger R\u00e9cup\u00e9rer le fichier tri_selection.py \u00e0 compl\u00e9ter. Question 1 Compl\u00e9ter les fonctions : minimum(tableau, debut) : renvoie l' indice de l'\u00e9l\u00e9ment de valeur minimale dans l'intervalle [debut, len(tableau) - 1] . echanger(tableau, i, j) : \u00e9change les \u00e9l\u00e9ments d'indices i et j du tableau tableau . Compl\u00e9ter la fonction tri_selection(tableau) qui effectue le tri par s\u00e9lection des \u00e9l\u00e9ments d'un tableau tableau donn\u00e9, en r\u00e9utilisant les deux fonctions pr\u00e9c\u00e9dentes. Est-il n\u00e9cessaire de mettre un return None ? Pourquoi ? Peut-on dire que la fonction tri_selection est une proc\u00e9dure ? Pourquoi ? Tester ma fonction Le programme est muni de tests (lignes 12 \u00e0 21 ) ex\u00e9cut\u00e9s par le module Doctest . Vous pouvez donc tester vos fonctions en ex\u00e9cutant simplement le programme. Si rien ne se passe, c'est que tout est bon. Sinon, l'interpr\u00e9teur indiquera les tests qui ont \u00e9chou\u00e9. (Vous pouvez rajouter d'autres tests ou effectuer des tests sur l'interpr\u00e9teur si vous le souhaitez.) Question 2 Compl\u00e9ter la fonction tri_selection_tout_en_un(tableau) en r\u00e9-\u00e9crivant le tri par s\u00e9lection sans appeler d'autres fonctions (les recherches du minimum et les \u00e9changes sont effectu\u00e9s directement dans cette fonction ). Question 3 \u00c9crire la fonction tri_selection_decroissant(tableau) qui effectue le tri par s\u00e9lection des \u00e9l\u00e9ments d'un tableau dans l' ordre d\u00e9croissant . Question 4 Dans les tests , \u00e0 la ligne 18 , on trouve l'instruction l = [randint(0, 100) for _ in range(20)] . Que fait cette instruction ? Quel est le nom de la m\u00e9thode de cr\u00e9ation de liste utilis\u00e9e ? Co\u00fbt du tri par s\u00e9lection Voyons \u00e0 pr\u00e9sent quel est le co\u00fbt du tri par s\u00e9lection . On rappelle l'algorithme du tri par s\u00e9lection et de recherche du minimum : Algorithme du tri par s\u00e9lection ALGORITHME : tri_selection ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments pouvant \u00eatre compar\u00e9s SORTIE : aucune (tri en place ) D\u00c9BUT \u2003\u2003n \u2190 longueur(tableau) \u2003\u2003 POUR debut ALLANT DE 0 \u00c0 n - 2 \u2003\u2003\u2003\u2003indice_min \u2190 minimum(tableau, debut) \u2003\u2003\u2003\u2003 SI indice_min \u2260 debut, ALORS \u2003\u2003\u2003\u2003\u2003\u2003echanger(tableau, debut, indice_min) \u2003\u2003 FIN POUR \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Algorithme de recherche du minimum ALGORITHME : minimum ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments debut : l' indice \u00e0 partir duquel effectuer la recherche SORTIE : l' indice de l'\u00e9l\u00e9ment minimal dans l'intervalle [debut, longueur(tableau) - 1] du tableau D\u00c9BUT \u2003\u2003indice_min \u2190 debut \u2003\u2003 POUR i ALLANT DE debut + 1 \u00c0 longueur(tableau) - 1 \u2003\u2003\u2003 SI tableau[i] < tableau[indice_min], ALORS \u2003\u2003\u2003\u2003indice_min \u2190 i \u2003\u2003 FIN POUR \u2003\u2003Renvoyer indice_min FIN ALGORITHME Question 1 On souhaite calculer le nombre de comparaisons effectu\u00e9 pour trier la liste [3, 7, 1, 6, 5, 2] . Compl\u00e9ter le tableau suivant en indiquant le nombre de comparaisons effectu\u00e9 apr\u00e8s chaque it\u00e9ration de la boucle principale POUR debut ALLANT DE 0 \u00c0 n - 2 , c'est-\u00e0-dire le nombre de comparaisons effectu\u00e9 par l'algorithme minimum(tableau, debut) pour chaque valeur de debut de 0 \u00e0 n , n \u00e9tant la longueur du tableau . it\u00e9ration k = debut tableau apr\u00e8s it\u00e9ration k nombre de comparaisons 1 0 [1, 7, 3, 6, 5, 2 ] ... 2 1 [3, 2, 1, 6, 5, 7 ] ... 3 2 [3, 7, 1, 6, 5, 2 ] ... 4 3 [3, 7, 1, 2, 5, 6 ] ... 5 4 [3, 7, 1, 6, 5, 6 ] ... Calculer le nombre de comparaisons au total , not\u00e9 \\(C(6)\\) , effectu\u00e9 pour trier ce tableau. Question 2 Si l'on change les valeurs du tableau de la question pr\u00e9c\u00e9dente, le nombre de comparaisons change t-il ? Pourquoi ? Question 3 Calculer le nombre de comparaisons , not\u00e9 \\(C(n)\\) , pour un tableau de taille \\(n\\) . Finalement, quelle est la complexit\u00e9 du tri par s\u00e9lection ? (Voir l'aide ci-dessous si n\u00e9cessaire.) Rappel sur les complexit\u00e9s Voici un rappel sur les diff\u00e9rentes complexit\u00e9s : Logarithmique \\(\u0398(log~n)\\) : la complexit\u00e9 \u00e9volue moins vite que le nombre n de donn\u00e9es (par exemple : si on multiplie le nombre de donn\u00e9es n par 2 , on ne rajoute qu' une seule op\u00e9ration). Lin\u00e9aire \\(\u0398(n)\\) : la complexit\u00e9 \u00e9volue comme le nombre n de donn\u00e9es (par exemple : si on multiplie le nombre de donn\u00e9es n par 2 , le temps d'ex\u00e9cution est multipli\u00e9 par 2 ). Quasi-lin\u00e9aire \\(O(n~log~n)\\) : Interm\u00e9diaire entre lin\u00e9aire et quadratique. En pratique, un algorithme de complexit\u00e9 quasi-lin\u00e9aire a un comportement tr\u00e8s proche d\u2019un algorithme de complexit\u00e9 lin\u00e9aire. Quadratique \\(\u0398(n^2)\\) : la complexit\u00e9 \u00e9volue comme le carr\u00e9 du nombre n de donn\u00e9es (par exemple : si on multiplie le nombres de donn\u00e9es n par 2 , le temps d'ex\u00e9cution est multipli\u00e9 par 4 ). Exponentielle \\(\u0398(2^n)\\) : la complexit\u00e9 \u00e9volue \u00e0 terme beaucoup plus vite que n'importe quelle fonction polynomiale du nombre n de donn\u00e9es (par exemple : si on multiplie le nombre de donn\u00e9es n par 100 , le temps d'ex\u00e9cution est multipli\u00e9 par \\(2^{100}\\) , soit 1267650600228229401496703205376 ). Source : https://buzut.net/cours/computer-science/time-complexity \u00c0 t\u00e9l\u00e9charger R\u00e9cup\u00e9rer le fichier analyse_tri_selection.py . Ce fichier permet de compter le nombre de comparaisons effectu\u00e9 par le tri par s\u00e9lection , en utilisant une variable globale CNT incr\u00e9ment\u00e9e \u00e0 chaque comparaison de deux \u00e9l\u00e9ments effectu\u00e9e. Vous pouvez modifier l'instruction \u00e0 la ligne 38 en changeant le tableau pour lequel vous souhaitez compter le nombre de comparaisons. Terminaison du tri par s\u00e9lection Variant de boucle Un variant de boucle est un entier naturel qui d\u00e9croit strictement \u00e0 chaque tour de boucle. On exhibe un variant de boucle pour d\u00e9montrer qu'une boucle se termine , en un temps fini. \u00e0 suivre... Preuve de correction du tri par s\u00e9lection \u00e0 venir...","title":"Tri par s\u00e9lection"},{"location":"tri_selection/#le-tri-par-selection","text":"Le tri par s\u00e9lection (du minimum ou du maximum ) est un algorithme de tri par comparaisons . Il s'agit d'un algorithme simple mais qui est, comme on le verra, inefficace .","title":"Le tri par s\u00e9lection"},{"location":"tri_selection/#presentation-du-tri","text":"","title":"Pr\u00e9sentation du tri"},{"location":"tri_selection/#avec-un-jeu-de-cartes","text":"Pour comprendre le fonctionnement de ce tri, voici une petite activit\u00e9 \u00e0 r\u00e9aliser avec un jeu de cartes traditionnel. On souhaite trier une suite de 7 cartes arbitrairement choisies. Par exemple : On ne se souciera ici que des valeurs des cartes et non de leurs couleurs . Voici l' ordre des valeurs des cartes, de la moins forte \u00e0 la plus forte , que l'on utilisera : Note : Si la carte Joker existe dans votre jeu, on consid\u00e8rera qu'elle est plus forte que toutes les autres cartes. Principe du tri par s\u00e9lection Le principe du tri par s\u00e9lection du minimum est le suivant : Chercher l' indice de la plus faible carte de la suite (\u00e0 partir de l'indice 0 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en premier . La premi\u00e8re carte est maintenant la plus faible . Chercher l' indice de la plus faible carte de la suite en partant du 2\u00e8me \u00e9l\u00e9ment (indice 1 ) et \u00e9changer cette carte avec celle qui est plac\u00e9e en deuxi\u00e8me . Les deux premi\u00e8res cartes sont les plus faibles et sont maintenant tri\u00e9es . Poursuivre ainsi jusqu\u2019\u00e0 l\u2019 avant derni\u00e8re carte de la suite. Exemple de d\u00e9roulement du tri par s\u00e9lection","title":"Avec un jeu de cartes"},{"location":"tri_selection/#simulation-avec-des-barres","text":"Voici une simulation du tri par s\u00e9lection en utilisant des barres de diff\u00e9rentes tailles comme \u00e9l\u00e9ments. Le but est de trier les barres de la plus petite \u00e0 la plus grande . Simulation du tri par s\u00e9lection du minimum Ex\u00e9cuter R\u00e9initialiser Acc\u00e9l\u00e9rer Ralentir","title":"Simulation avec des barres"},{"location":"tri_selection/#lalgorithme","text":"L'algorithme du tri par s\u00e9lection peut \u00eatre impl\u00e9ment\u00e9 en place ou non. Tri en place Un tri est dit en place s'il modifie directement la structure qu\u2019il est en train de trier, plut\u00f4t que de cr\u00e9er et de renvoyer une nouvelle structure. Ici, on ne renverra pas de nouveau tableau, on modifiera directement le tableau donn\u00e9 en entr\u00e9e. Le tri s'effectuera par s\u00e9lection du minimum . Pour simplifier les choses, on commence par s\u00e9parer l'algorithme de tri en 3 sous-algorithmes : l'algorithme principal tri_selection(tableau) permettant de trier un tableau d'\u00e9l\u00e9ments avec le tri par s\u00e9lection , l'algorithme minimum(tableau, debut) permettant la recherche de l'indice de l' \u00e9l\u00e9ment minimal du tableau \u00e0 partir de l'indice debut donn\u00e9, l'algorithme echanger(tableau, i, j) permettant d'\u00e9changer deux \u00e9l\u00e9ments d'indices i et j donn\u00e9s. Algorithme du tri par s\u00e9lection ALGORITHME : tri_selection ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments pouvant \u00eatre compar\u00e9s SORTIE : aucune (tri en place ) D\u00c9BUT \u2003\u2003n \u2190 longueur(tableau) \u2003\u2003 POUR debut ALLANT DE 0 \u00c0 n - 2 \u2003\u2003\u2003\u2003indice_min \u2190 minimum(tableau, debut) \u2003\u2003\u2003\u2003 SI indice_min \u2260 debut, ALORS \u2003\u2003\u2003\u2003\u2003\u2003echanger(tableau, debut, indice_min) \u2003\u2003 FIN POUR \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Algorithme de recherche du minimum ALGORITHME : minimum ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments debut : l' indice \u00e0 partir duquel effectuer la recherche SORTIE : l' indice de l'\u00e9l\u00e9ment minimal dans l'intervalle [debut, longueur(tableau) - 1] du tableau D\u00c9BUT \u2003\u2003indice_min \u2190 debut \u2003\u2003 POUR i ALLANT DE debut + 1 \u00c0 longueur(tableau) - 1 \u2003\u2003\u2003 SI tableau[i] < tableau[indice_min], ALORS \u2003\u2003\u2003\u2003indice_min \u2190 i \u2003\u2003 FIN POUR \u2003\u2003Renvoyer indice_min FIN ALGORITHME Algorithme d'\u00e9change d'\u00e9l\u00e9ments ALGORITHME : echanger ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments i : l' indice d'un \u00e9l\u00e9ment du tableau j : l' indice d'un autre \u00e9l\u00e9ment du tableau SORTIE : aucune (tri en place) D\u00c9BUT \u2003\u2003temp \u2190 tableau[i] \u2003\u2003tableau[i] \u2190 tableau[j] \u2003\u2003tableau[j] \u2190 temp \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Voici enfin une version en un seul algorithme : Algorithme du tri par s\u00e9lection ALGORITHME : tri_selection ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments pouvant \u00eatre compar\u00e9s . SORTIE : aucune (tri en place ) D\u00c9BUT \u2003\u2003n \u2190 longueur(tableau) \u2003\u2003 POUR debut ALLANT DE 0 \u00c0 n - 2 \u2003\u2003\u2003\u2003indice_min \u2190 debut \u2003\u2003\u2003\u2003 POUR i ALLANT DE debut + 1 \u00c0 n - 1 \u2003\u2003\u2003\u2003\u2003\u2003 SI tableau[i] < tableau[indice_min], ALORS \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003indice_min \u2190 i \u2003\u2003\u2003\u2003 FIN POUR \u2003\u2003\u2003\u2003 SI indice_min \u2260 debut, ALORS \u2003\u2003\u2003\u2003\u2003\u2003temp \u2190 tableau[debut] \u2003\u2003\u2003\u2003\u2003\u2003tableau[debut] \u2190 tableau[indice_min] \u2003\u2003\u2003\u2003\u2003\u2003tableau[indice_min] \u2190 temp \u2003\u2003 FIN POUR \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Notes La premi\u00e8re boucle POUR s'arr\u00eate \u00e0 n - 2 car si tous les \u00e9l\u00e9ments de l'intervalle [0, longueur(tableau) - 2] sont tri\u00e9s , l'\u00e9l\u00e9ment d' indice longueur(tableau) - 1 est obligatoirement d\u00e9j\u00e0 \u00e0 la bonne position . La condition SI indice_min \u2260 i, ALORS permet d'\u00e9viter d'effectuer une permutation si l'\u00e9l\u00e9ment d'indice i correspond \u00e0 l'\u00e9l\u00e9ment minimal . Stabilit\u00e9 du tri Un tri est dit stable s'il pr\u00e9serve l\u2019 ordonnancement initial des \u00e9l\u00e9ments que l'ordre consid\u00e8re comme \u00e9gaux. Le tri par s\u00e9lection est, dans le cas de notre algorithme, instable car en cas de valeurs identiques dans le tableau initial, leur ordre relatif peut \u00eatre modifi\u00e9. Exemple : Avec le tableau [2, 4a, 4b, 3, 7, 5] , l'ordre des \u00e9l\u00e9ments de valeur 4 n'est pas conserv\u00e9. S\u00e9lection du maximum Si l'on souhait \u00e9crire cet algorithme en s\u00e9lectionnant le maximum plut\u00f4t que le minimum, le principe serait le m\u00eame, mais le parcours s'effectuerait du dernier \u00e9l\u00e9ment au premier \u00e9l\u00e9ment du tableau. Le tableau serait dans ce cas d'abord compos\u00e9 de la partie non tri\u00e9e , puis de la partie tri\u00e9e . \u00c0 vous de jouer Question 1 : D\u00e9roulez le tri par s\u00e9lection du minimum sur le tableau [7, 1, 5, 3, 8, 5] en vous aidant du tableau suivant : Question 2 : Faites de m\u00eame sur le tableau [5, 3, 1, 4, 6, 2] . Question 3 : M\u00eame chose cette fois avec le tableau ['b', 'e', 'c', 'w', 'p', 'q'] . On utilisera l'ordre lexicographique .","title":"L'algorithme"},{"location":"tri_selection/#implementation-du-tri-par-selection","text":"On va maintenant impl\u00e9menter l'algorithme du tri par s\u00e9lection en Python . Les tableaux seront repr\u00e9sent\u00e9s par des listes Python (objets de type list ). Question pr\u00e9liminaire Les listes Python sont-elles des structures de donn\u00e9es mutables ou non ? Citer 2 structures mutables et deux structures non-mutables en Python. Note : Pour simplifier, on parlera de tableaux tri\u00e9s pour parler de tableaux tri\u00e9s dans l'ordre croissant . \u00c0 t\u00e9l\u00e9charger R\u00e9cup\u00e9rer le fichier tri_selection.py \u00e0 compl\u00e9ter. Question 1 Compl\u00e9ter les fonctions : minimum(tableau, debut) : renvoie l' indice de l'\u00e9l\u00e9ment de valeur minimale dans l'intervalle [debut, len(tableau) - 1] . echanger(tableau, i, j) : \u00e9change les \u00e9l\u00e9ments d'indices i et j du tableau tableau . Compl\u00e9ter la fonction tri_selection(tableau) qui effectue le tri par s\u00e9lection des \u00e9l\u00e9ments d'un tableau tableau donn\u00e9, en r\u00e9utilisant les deux fonctions pr\u00e9c\u00e9dentes. Est-il n\u00e9cessaire de mettre un return None ? Pourquoi ? Peut-on dire que la fonction tri_selection est une proc\u00e9dure ? Pourquoi ? Tester ma fonction Le programme est muni de tests (lignes 12 \u00e0 21 ) ex\u00e9cut\u00e9s par le module Doctest . Vous pouvez donc tester vos fonctions en ex\u00e9cutant simplement le programme. Si rien ne se passe, c'est que tout est bon. Sinon, l'interpr\u00e9teur indiquera les tests qui ont \u00e9chou\u00e9. (Vous pouvez rajouter d'autres tests ou effectuer des tests sur l'interpr\u00e9teur si vous le souhaitez.) Question 2 Compl\u00e9ter la fonction tri_selection_tout_en_un(tableau) en r\u00e9-\u00e9crivant le tri par s\u00e9lection sans appeler d'autres fonctions (les recherches du minimum et les \u00e9changes sont effectu\u00e9s directement dans cette fonction ). Question 3 \u00c9crire la fonction tri_selection_decroissant(tableau) qui effectue le tri par s\u00e9lection des \u00e9l\u00e9ments d'un tableau dans l' ordre d\u00e9croissant . Question 4 Dans les tests , \u00e0 la ligne 18 , on trouve l'instruction l = [randint(0, 100) for _ in range(20)] . Que fait cette instruction ? Quel est le nom de la m\u00e9thode de cr\u00e9ation de liste utilis\u00e9e ?","title":"Impl\u00e9mentation du tri par s\u00e9lection"},{"location":"tri_selection/#cout-du-tri-par-selection","text":"Voyons \u00e0 pr\u00e9sent quel est le co\u00fbt du tri par s\u00e9lection . On rappelle l'algorithme du tri par s\u00e9lection et de recherche du minimum : Algorithme du tri par s\u00e9lection ALGORITHME : tri_selection ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments pouvant \u00eatre compar\u00e9s SORTIE : aucune (tri en place ) D\u00c9BUT \u2003\u2003n \u2190 longueur(tableau) \u2003\u2003 POUR debut ALLANT DE 0 \u00c0 n - 2 \u2003\u2003\u2003\u2003indice_min \u2190 minimum(tableau, debut) \u2003\u2003\u2003\u2003 SI indice_min \u2260 debut, ALORS \u2003\u2003\u2003\u2003\u2003\u2003echanger(tableau, debut, indice_min) \u2003\u2003 FIN POUR \u2003\u2003Renvoyer \u2205 FIN ALGORITHME Algorithme de recherche du minimum ALGORITHME : minimum ENTR\u00c9ES : tableau : un tableau d'\u00e9l\u00e9ments debut : l' indice \u00e0 partir duquel effectuer la recherche SORTIE : l' indice de l'\u00e9l\u00e9ment minimal dans l'intervalle [debut, longueur(tableau) - 1] du tableau D\u00c9BUT \u2003\u2003indice_min \u2190 debut \u2003\u2003 POUR i ALLANT DE debut + 1 \u00c0 longueur(tableau) - 1 \u2003\u2003\u2003 SI tableau[i] < tableau[indice_min], ALORS \u2003\u2003\u2003\u2003indice_min \u2190 i \u2003\u2003 FIN POUR \u2003\u2003Renvoyer indice_min FIN ALGORITHME Question 1 On souhaite calculer le nombre de comparaisons effectu\u00e9 pour trier la liste [3, 7, 1, 6, 5, 2] . Compl\u00e9ter le tableau suivant en indiquant le nombre de comparaisons effectu\u00e9 apr\u00e8s chaque it\u00e9ration de la boucle principale POUR debut ALLANT DE 0 \u00c0 n - 2 , c'est-\u00e0-dire le nombre de comparaisons effectu\u00e9 par l'algorithme minimum(tableau, debut) pour chaque valeur de debut de 0 \u00e0 n , n \u00e9tant la longueur du tableau . it\u00e9ration k = debut tableau apr\u00e8s it\u00e9ration k nombre de comparaisons 1 0 [1, 7, 3, 6, 5, 2 ] ... 2 1 [3, 2, 1, 6, 5, 7 ] ... 3 2 [3, 7, 1, 6, 5, 2 ] ... 4 3 [3, 7, 1, 2, 5, 6 ] ... 5 4 [3, 7, 1, 6, 5, 6 ] ... Calculer le nombre de comparaisons au total , not\u00e9 \\(C(6)\\) , effectu\u00e9 pour trier ce tableau. Question 2 Si l'on change les valeurs du tableau de la question pr\u00e9c\u00e9dente, le nombre de comparaisons change t-il ? Pourquoi ? Question 3 Calculer le nombre de comparaisons , not\u00e9 \\(C(n)\\) , pour un tableau de taille \\(n\\) . Finalement, quelle est la complexit\u00e9 du tri par s\u00e9lection ? (Voir l'aide ci-dessous si n\u00e9cessaire.) Rappel sur les complexit\u00e9s Voici un rappel sur les diff\u00e9rentes complexit\u00e9s : Logarithmique \\(\u0398(log~n)\\) : la complexit\u00e9 \u00e9volue moins vite que le nombre n de donn\u00e9es (par exemple : si on multiplie le nombre de donn\u00e9es n par 2 , on ne rajoute qu' une seule op\u00e9ration). Lin\u00e9aire \\(\u0398(n)\\) : la complexit\u00e9 \u00e9volue comme le nombre n de donn\u00e9es (par exemple : si on multiplie le nombre de donn\u00e9es n par 2 , le temps d'ex\u00e9cution est multipli\u00e9 par 2 ). Quasi-lin\u00e9aire \\(O(n~log~n)\\) : Interm\u00e9diaire entre lin\u00e9aire et quadratique. En pratique, un algorithme de complexit\u00e9 quasi-lin\u00e9aire a un comportement tr\u00e8s proche d\u2019un algorithme de complexit\u00e9 lin\u00e9aire. Quadratique \\(\u0398(n^2)\\) : la complexit\u00e9 \u00e9volue comme le carr\u00e9 du nombre n de donn\u00e9es (par exemple : si on multiplie le nombres de donn\u00e9es n par 2 , le temps d'ex\u00e9cution est multipli\u00e9 par 4 ). Exponentielle \\(\u0398(2^n)\\) : la complexit\u00e9 \u00e9volue \u00e0 terme beaucoup plus vite que n'importe quelle fonction polynomiale du nombre n de donn\u00e9es (par exemple : si on multiplie le nombre de donn\u00e9es n par 100 , le temps d'ex\u00e9cution est multipli\u00e9 par \\(2^{100}\\) , soit 1267650600228229401496703205376 ). Source : https://buzut.net/cours/computer-science/time-complexity \u00c0 t\u00e9l\u00e9charger R\u00e9cup\u00e9rer le fichier analyse_tri_selection.py . Ce fichier permet de compter le nombre de comparaisons effectu\u00e9 par le tri par s\u00e9lection , en utilisant une variable globale CNT incr\u00e9ment\u00e9e \u00e0 chaque comparaison de deux \u00e9l\u00e9ments effectu\u00e9e. Vous pouvez modifier l'instruction \u00e0 la ligne 38 en changeant le tableau pour lequel vous souhaitez compter le nombre de comparaisons.","title":"Co\u00fbt du tri par s\u00e9lection"},{"location":"tri_selection/#terminaison-du-tri-par-selection","text":"Variant de boucle Un variant de boucle est un entier naturel qui d\u00e9croit strictement \u00e0 chaque tour de boucle. On exhibe un variant de boucle pour d\u00e9montrer qu'une boucle se termine , en un temps fini. \u00e0 suivre...","title":"Terminaison du tri par s\u00e9lection"},{"location":"tri_selection/#preuve-de-correction-du-tri-par-selection","text":"\u00e0 venir...","title":"Preuve de correction du tri par s\u00e9lection"},{"location":"pour_cours/correction_tri_selection/","text":"Corrig\u00e9 question 3 de la partie \"co\u00fbt\" : \\[ C(n) = 1 + 2 + [...] + (n - 2) + (n - 1) = \\frac{(n - 1)n}{2} \\] \\[ C(n) = \\sum_{x=1}^{n-1}x = \\frac{(n - 1)n}{2} \\] Voir https://www.infoforall.fr/act/algo/preuve-du-tri-par-selection/#partie_3 question 10","title":"Correction tri selection"}]}